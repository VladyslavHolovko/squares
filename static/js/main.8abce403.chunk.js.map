{"version":3,"sources":["components/Square/index.js","components/SquaresContainer/index.js","components/InfoCard/index.js","components/HoverInfoContainer/index.js","utils/toStartCase.js","components/ModeSelectorContainer/index.js","requests/getAppModes.js","app/App.js","index.js"],"names":["Square","isFilled","onMouseEnter","className","classNames","SquaresContainer","squaresState","onSquareEnter","length","style","Math","sqrt","map","square","index","row","col","InfoCard","data","Paper","HoverInfoContainer","cards","filter","toStartCase","string","withSpace","replace","charAt","toUpperCase","slice","ModeSelectorContainer","modes","selectedValue","onChange","isHoverActive","setIsHoverActive","FormControl","variant","InputLabel","id","Select","label","labelId","e","target","value","Object","entries","key","MenuItem","field","Button","color","onClick","state","getAppModes","a","fetch","then","res","json","catch","error","console","log","App","useState","appModes","setAppModes","selectedSize","setSelectedSize","setSquaresState","useEffect","squaresData","Array","fill","_","ceil","newState","JSON","parse","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8abce403.chunk.js","sourcesContent":["import './index.scss';\r\nimport React from 'react';\r\nimport classNames from \"classnames\";\r\n\r\nconst Square = ({ isFilled, onMouseEnter }) => {\r\n        return (\r\n        <div\r\n            className={classNames({\r\n                'square': true,\r\n                'square_filled': isFilled\r\n            })}\r\n            onMouseEnter={onMouseEnter}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Square;","import './index.scss';\r\nimport React from 'react';\r\nimport Square from \"../Square\";\r\n\r\nconst SquaresContainer = ({ squaresState, onSquareEnter }) => {\r\n    if (!squaresState.length) return null;\r\n\r\n    return (\r\n        <div\r\n            className=\"squares squares__container\"\r\n            style={{ '--size': Math.sqrt(squaresState.length) }}\r\n        >\r\n            {squaresState.map((square, index) => (\r\n                <Square\r\n                    key={`row${square.row}col${square.col}`}\r\n                    isFilled={square.isFilled}\r\n                    onMouseEnter={onSquareEnter(index)}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SquaresContainer;","import './index.scss';\r\nimport React from 'react';\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst InfoCard = ({ data }) => {\r\n    return (\r\n        <Paper className=\"info-card info-card__container\">\r\n            <div className=\"info-card__col\">\r\n                <span className=\"info-card__label\">\r\n                    row\r\n                </span>\r\n                <span className=\"info-card__num\">\r\n                    {data.row}\r\n                </span>\r\n            </div>\r\n            <div className=\"info-card__col\">\r\n                <span className=\"info-card__label\">\r\n                    col\r\n                </span>\r\n                <span className=\"info-card__num\">\r\n                    {data.col}\r\n                </span>\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default InfoCard;","import './index.scss';\r\nimport React from 'react';\r\nimport InfoCard from \"../InfoCard\";\r\n\r\nconst HoverInfoContainer = ({ squaresState }) => {\r\n    const cards = squaresState.filter(square => square.isFilled);\r\n\r\n    return (\r\n        <div className=\"hover-info hover-info__container\">\r\n            <h3 className=\"hover-info__title\">\r\n                Hover squares\r\n            </h3>\r\n            <div className=\"hover-info__cards-container\">\r\n                {cards.map((data, index) => (\r\n                    <InfoCard\r\n                        key={index}\r\n                        data={data}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HoverInfoContainer;","const toStartCase = (string) => {\r\n    const withSpace = string.replace( /([A-Z])/g, \" $1\" );\r\n    return withSpace.charAt(0).toUpperCase() + withSpace.slice(1);\r\n}\r\n\r\nexport default toStartCase;","import './index.scss';\r\nimport React from 'react';\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport toStartCase from \"../../utils/toStartCase\";\r\n\r\nconst ModeSelectorContainer = ({ modes, selectedValue, onChange, isHoverActive, setIsHoverActive }) => {\r\n    const handleSelectChange = e => {\r\n        onChange(e.target.value);\r\n        setIsHoverActive(false);\r\n    }\r\n\r\n    const handleStartClick = () => {\r\n        setIsHoverActive(state => !state);\r\n    }\r\n\r\n    return (\r\n        <div className=\"mode-selector mode-selector__container\">\r\n            <FormControl variant=\"outlined\" className=\"mode-selector__select\">\r\n                <InputLabel id=\"mode-selector__select-label\">Select mode</InputLabel>\r\n                <Select\r\n                    className=\"mode-selector__selects\"\r\n                    label=\"Select mode\"\r\n                    labelId=\"mode-selector__select-label\"\r\n                    onChange={handleSelectChange}\r\n                    value={selectedValue || ''}\r\n                >\r\n                    {Object.entries(modes).map(([key, value]) => (\r\n                        <MenuItem\r\n                            key={key}\r\n                            value={value.field}\r\n                        >\r\n                            {toStartCase(key)}\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            <Button\r\n                className=\"mode-selector__button\"\r\n                variant=\"contained\"\r\n                color={isHoverActive ? 'secondary' : 'primary'}\r\n                onClick={handleStartClick}\r\n            >\r\n                {isHoverActive ? 'Stop' : 'Start'}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModeSelectorContainer;","const getAppModes = async () => {\r\n    return await fetch('https://demo1030918.mockable.io/')\r\n        .then(res => res.json())\r\n        .catch(error => console.log(error));\r\n};\r\n\r\nexport default getAppModes;","import './App.scss';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport SquaresContainer from \"../components/SquaresContainer\";\r\nimport HoverInfoContainer from \"../components/HoverInfoContainer\";\r\nimport ModeSelectorContainer from \"../components/ModeSelectorContainer\";\r\nimport getAppModes from \"../requests/getAppModes\";\r\n\r\nfunction App() {\r\n    const [isHoverActive, setIsHoverActive] = useState(false);\r\n    const [appModes, setAppModes] = useState({});\r\n    const [selectedSize, setSelectedSize] = useState(0);\r\n    const [squaresState, setSquaresState] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getAppModes().then(setAppModes);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const squaresData = new Array(selectedSize * selectedSize).fill().map((_, index) => ({\r\n            row: Math.ceil((index + 1) / selectedSize),\r\n            col: index % selectedSize + 1,\r\n            isFilled: false\r\n        }));\r\n\r\n        setSquaresState(squaresData);\r\n    }, [selectedSize]);\r\n\r\n    const onSquareEnter = (index) => () => {\r\n        if (!isHoverActive) return;\r\n\r\n        setSquaresState(state => {\r\n            const newState = JSON.parse(JSON.stringify(state));\r\n\r\n            newState[index].isFilled = !newState[index].isFilled;\r\n\r\n            return newState;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"squares-app squares-app__container\">\r\n            <div className=\"squares-app__flex-item\">\r\n                <ModeSelectorContainer\r\n                    modes={appModes}\r\n                    selectedValue={selectedSize}\r\n                    onChange={setSelectedSize}\r\n                    isHoverActive={isHoverActive}\r\n                    setIsHoverActive={setIsHoverActive}\r\n                />\r\n                <SquaresContainer\r\n                    squaresState={squaresState}\r\n                    onSquareEnter={onSquareEnter}\r\n                />\r\n            </div>\r\n            <div className=\"squares-app__hover-info\">\r\n                <HoverInfoContainer\r\n                    squaresState={squaresState}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}